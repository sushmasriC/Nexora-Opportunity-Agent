"""
Email service using SendGrid for sending notifications.
Handles email composition and delivery to users.
"""

import sendgrid
from sendgrid.helpers.mail import Mail, Email, To, Content
from typing import List, Optional
import logging
from datetime import datetime

from ..config import settings
from ..models import MatchResult, EmailNotification

logger = logging.getLogger(__name__)


class EmailService:
    """Service for sending emails via SendGrid."""
    
    def __init__(self):
        """Initialize SendGrid client."""
        self.sg = sendgrid.SendGridAPIClient(api_key=settings.sendgrid_api_key)
        self.from_email = Email(settings.from_email, settings.from_name)
    
    def create_opportunity_html(self, match: MatchResult) -> str:
        """
        Create HTML content for a single opportunity.
        
        Args:
            match: MatchResult containing opportunity and match details
            
        Returns:
            HTML string for the opportunity
        """
        opp = match.opportunity
        
        html = f"""
        <div style="border: 1px solid #ddd; padding: 15px; margin: 10px 0; border-radius: 5px;">
            <h3 style="color: #2c3e50; margin-top: 0;">{opp.title}</h3>
            <p><strong>Company:</strong> {opp.company}</p>
            <p><strong>Type:</strong> {opp.type.value.title()}</p>
            <p><strong>Location:</strong> {opp.location or 'Remote'}</p>
            <p><strong>Match Score:</strong> {match.similarity_score:.2%}</p>
            
            <p><strong>Description:</strong></p>
            <p style="background-color: #f8f9fa; padding: 10px; border-radius: 3px;">
                {opp.description[:300]}{'...' if len(opp.description) > 300 else ''}
            </p>
            
            {f'<p><strong>Skills Required:</strong> {", ".join(opp.skills_required)}</p>' if opp.skills_required else ''}
            {f'<p><strong>Matched Skills:</strong> {", ".join(match.matched_skills)}</p>' if match.matched_skills else ''}
            {f'<p><strong>Salary:</strong> {opp.salary_range}</p>' if opp.salary_range else ''}
            {f'<p><strong>Deadline:</strong> {opp.deadline.strftime("%Y-%m-%d") if opp.deadline else "No deadline"}</p>'}
            
            <p><strong>Why this matches:</strong> {match.reasoning}</p>
            
            <a href="{opp.url}" style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 3px; display: inline-block;">
                View Opportunity
            </a>
        </div>
        """
        return html
    
    def create_email_html(self, matches: List[MatchResult], user_email: str) -> str:
        """
        Create complete HTML email content.
        
        Args:
            matches: List of MatchResult objects
            user_email: User's email address
            
        Returns:
            Complete HTML email content
        """
        opportunities_html = ""
        for match in matches:
            opportunities_html += self.create_opportunity_html(match)
        
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>New Opportunities from Nexora</title>
        </head>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px;">
            <div style="background-color: #2c3e50; color: white; padding: 20px; border-radius: 5px; text-align: center; margin-bottom: 20px;">
                <h1 style="margin: 0;">ðŸš€ Nexora AI Agent</h1>
                <p style="margin: 5px 0 0 0;">Your personalized opportunity finder</p>
            </div>
            
            <h2>Hello!</h2>
            <p>We found <strong>{len(matches)} new opportunities</strong> that match your profile!</p>
            
            <div style="background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h3 style="margin-top: 0; color: #2c3e50;">ðŸ“Š Summary</h3>
                <ul>
                    <li><strong>Total Matches:</strong> {len(matches)}</li>
                    <li><strong>Average Match Score:</strong> {sum(m.similarity_score for m in matches) / len(matches):.1%}</li>
                    <li><strong>Best Match:</strong> {max(matches, key=lambda x: x.similarity_score).opportunity.title}</li>
                </ul>
            </div>
            
            <h3>ðŸŽ¯ Your Matched Opportunities</h3>
            {opportunities_html}
            
            <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 30px; text-align: center;">
                <p style="margin: 0; color: #666;">
                    This email was generated by Nexora AI Agent on {datetime.now().strftime("%Y-%m-%d %H:%M")}
                </p>
                <p style="margin: 5px 0 0 0; color: #666;">
                    To update your preferences, please visit your Nexora dashboard.
                </p>
            </div>
        </body>
        </html>
        """
        return html_content
    
    def send_opportunities_email(self, matches: List[MatchResult], user_email: str) -> bool:
        """
        Send email with matched opportunities to user.
        
        Args:
            matches: List of MatchResult objects
            user_email: User's email address
            
        Returns:
            True if email sent successfully, False otherwise
        """
        try:
            if not matches:
                logger.info(f"No matches to send to {user_email}")
                return True
            
            subject = f"ðŸš€ {len(matches)} New Opportunities Found - Nexora AI"
            html_content = self.create_email_html(matches, user_email)
            
            to_email = To(user_email)
            content = Content("text/html", html_content)
            
            mail = Mail(self.from_email, to_email, subject, content)
            
            response = self.sg.send(mail)
            
            if response.status_code in [200, 201, 202]:
                logger.info(f"Email sent successfully to {user_email}")
                return True
            else:
                logger.error(f"Failed to send email to {user_email}. Status: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"Error sending email to {user_email}: {e}")
            return False
    
    def send_test_email(self, user_email: str) -> bool:
        """
        Send a test email to verify email service is working.
        
        Args:
            user_email: User's email address
            
        Returns:
            True if email sent successfully, False otherwise
        """
        try:
            subject = "ðŸ§ª Nexora AI Agent - Test Email"
            html_content = """
            <!DOCTYPE html>
            <html>
            <body style="font-family: Arial, sans-serif; text-align: center; padding: 20px;">
                <h2>ðŸŽ‰ Test Email Successful!</h2>
                <p>Your Nexora AI Agent email service is working correctly.</p>
                <p>You'll receive personalized opportunity notifications here.</p>
            </body>
            </html>
            """
            
            to_email = To(user_email)
            content = Content("text/html", html_content)
            
            mail = Mail(self.from_email, to_email, subject, content)
            
            response = self.sg.send(mail)
            
            if response.status_code in [200, 201, 202]:
                logger.info(f"Test email sent successfully to {user_email}")
                return True
            else:
                logger.error(f"Failed to send test email to {user_email}. Status: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"Error sending test email to {user_email}: {e}")
            return False
